import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from scipy.fft import rfft, irfft, dct, idct
import pandas as pd

def load_rhos_data(filename='func.txt'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ func.txt"""
    try:
        with open(filename, 'r') as f:
            content = f.read().strip()
        
        data = []
        for x in content.split(','):
            x = x.strip()
            if x:
                try:
                    data.append(float(x))
                except ValueError:
                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{x}' –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        return np.array(data)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def fourier_reconstruction(f, num_coeffs):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –§—É—Ä—å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    N = len(f)
    f_fft = rfft(f)
    energies = np.abs(f_fft)
    idx_top = np.argsort(energies)[-num_coeffs:][::-1]
    
    f_fft_approx = np.zeros_like(f_fft)
    f_fft_approx[idx_top] = f_fft[idx_top]
    f_approx = irfft(f_fft_approx, n=N)
    
    err = np.linalg.norm(f - f_approx) / np.linalg.norm(f)
    return f_approx, err, f_fft, energies, idx_top

def dct_reconstruction(f, num_coeffs):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é DCT –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    f_dct = dct(f, type=2, norm='ortho')
    f_dct_approx = np.zeros_like(f_dct)
    f_dct_approx[:num_coeffs] = f_dct[:num_coeffs]
    f_approx = idct(f_dct_approx, type=2, norm='ortho')
    
    err = np.linalg.norm(f - f_approx) / np.linalg.norm(f)
    return f_approx, err, f_dct

def plot_reconstruction_comparison(f, f_approx_fft, f_approx_dct, err_fft, err_dct):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Plotly"""
    x = np.arange(len(f))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞', '–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'),
        vertical_spacing=0.1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    fig.add_trace(
        go.Scatter(x=x, y=f, mode='lines', name='–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª', 
                  line=dict(color='blue', width=2), opacity=0.8),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=x, y=f_approx_fft, mode='lines', 
                  name=f'–§—É—Ä—å–µ (–æ—à–∏–±–∫–∞: {err_fft:.4f})',
                  line=dict(color='red', width=2, dash='dash')),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=x, y=f_approx_dct, mode='lines', 
                  name=f'DCT (–æ—à–∏–±–∫–∞: {err_dct:.4f})',
                  line=dict(color='green', width=2, dash='dash')),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    error_fft = np.abs(f - f_approx_fft)
    error_dct = np.abs(f - f_approx_dct)
    
    fig.add_trace(
        go.Scatter(x=x, y=error_fft, mode='lines', 
                  name=f'–û—à–∏–±–∫–∞ –§—É—Ä—å–µ (—Å—Ä–µ–¥–Ω—è—è: {np.mean(error_fft):.4f})',
                  line=dict(color='red', width=1)),
        row=2, col=1
    )
    fig.add_trace(
        go.Scatter(x=x, y=error_dct, mode='lines', 
                  name=f'–û—à–∏–±–∫–∞ DCT (—Å—Ä–µ–¥–Ω—è—è: {np.mean(error_dct):.4f})',
                  line=dict(color='green', width=1)),
        row=2, col=1
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        height=1000,
        showlegend=True,
        title_text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞",
        title_x=0.5
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(title_text="–ò–Ω–¥–µ–∫—Å", row=1, col=1)
    fig.update_yaxes(title_text="–ó–Ω–∞—á–µ–Ω–∏–µ", row=1, col=1)
    fig.update_xaxes(title_text="–ò–Ω–¥–µ–∫—Å", row=2, col=1)
    fig.update_yaxes(title_text="–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", row=2, col=1)
    
    return fig

def plot_spectrum_comparison(f_fft, energies, idx_top, f_dct, num_coeffs_fft, num_coeffs_dct):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é Plotly"""
    freq = np.arange(len(energies))
    dct_coeffs = np.arange(len(f_dct))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('–°–ø–µ–∫—Ç—Ä –§—É—Ä—å–µ (–º–æ–¥—É–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)', '–°–ø–µ–∫—Ç—Ä DCT (–º–æ–¥—É–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)'),
        vertical_spacing=0.1
    )
    
    # –°–ø–µ–∫—Ç—Ä –§—É—Ä—å–µ
    fig.add_trace(
        go.Scatter(x=freq, y=energies, mode='lines', name='–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä',
                  line=dict(color='blue', width=1), opacity=0.7),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=freq[idx_top], y=energies[idx_top], mode='markers', 
                  name=f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ {num_coeffs_fft} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤',
                  marker=dict(color='red', size=8, symbol='circle')),
        row=1, col=1
    )
    
    # –°–ø–µ–∫—Ç—Ä DCT
    fig.add_trace(
        go.Scatter(x=dct_coeffs, y=np.abs(f_dct), mode='lines', name='–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä',
                  line=dict(color='green', width=1), opacity=0.7),
        row=2, col=1
    )
    fig.add_trace(
        go.Scatter(x=dct_coeffs[:num_coeffs_dct], y=np.abs(f_dct[:num_coeffs_dct]), 
                  mode='markers', name=f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ {num_coeffs_dct} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤',
                  marker=dict(color='red', size=8, symbol='circle')),
        row=2, col=1
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        height=900,
        showlegend=True,
        title_text="–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        title_x=0.5
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–æ–π
    fig.update_xaxes(title_text="–ß–∞—Å—Ç–æ—Ç–∞", row=1, col=1)
    fig.update_yaxes(title_text="–ú–æ–¥—É–ª—å", type="log", row=1, col=1)
    fig.update_xaxes(title_text="–ò–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", row=2, col=1)
    fig.update_yaxes(title_text="–ú–æ–¥—É–ª—å", type="log", row=2, col=1)
    
    return fig

def plot_coefficients_comparison(f_fft, energies, idx_top, f_dct, num_coeffs_fft, num_coeffs_dct):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    fourier_data = pd.DataFrame({
        '–ò–Ω–¥–µ–∫—Å': idx_top,
        '–ú–æ–¥—É–ª—å': energies[idx_top],
        '–ú–µ—Ç–æ–¥': '–§—É—Ä—å–µ'
    })
    
    dct_data = pd.DataFrame({
        '–ò–Ω–¥–µ–∫—Å': range(num_coeffs_dct),
        '–ú–æ–¥—É–ª—å': np.abs(f_dct[:num_coeffs_dct]),
        '–ú–µ—Ç–æ–¥': 'DCT'
    })
    
    combined_data = pd.concat([fourier_data, dct_data], ignore_index=True)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(combined_data, x='–ò–Ω–¥–µ–∫—Å', y='–ú–æ–¥—É–ª—å', color='–ú–µ—Ç–æ–¥',
                 title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤',
                 barmode='group')
    
    fig.update_layout(
        height=800,
        title_x=0.5,
        xaxis_title="–ò–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞",
        yaxis_title="–ú–æ–¥—É–ª—å",
        yaxis_type="log"
    )
    
    return fig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞", layout="wide")
st.title("üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: –§—É—Ä—å–µ vs DCT")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
f = load_rhos_data()
if f is None:
    st.stop()

st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(f)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

# –°–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
max_coeffs_fft = min(50, len(f) // 2)  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –§—É—Ä—å–µ
max_coeffs_dct = min(100, len(f))      # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è DCT

num_coeffs_fft = st.sidebar.slider(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –§—É—Ä—å–µ", 
    min_value=1, 
    max_value=max_coeffs_fft, 
    value=12,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –§—É—Ä—å–µ"
)

num_coeffs_dct = st.sidebar.slider(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ DCT", 
    min_value=1, 
    max_value=max_coeffs_dct, 
    value=24,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ DCT"
)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
f_approx_fft, err_fft, f_fft, energies, idx_top = fourier_reconstruction(f, num_coeffs_fft)
f_approx_dct, err_dct, f_dct = dct_reconstruction(f, num_coeffs_dct)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–û—à–∏–±–∫–∞ –§—É—Ä—å–µ", f"{err_fft:.4f}")
with col2:
    st.metric("–û—à–∏–±–∫–∞ DCT", f"{err_dct:.4f}")
with col3:
    better_method = "–§—É—Ä—å–µ" if err_fft < err_dct else "DCT"
    st.metric("–õ—É—á—à–∏–π –º–µ—Ç–æ–¥", better_method)

# –ì—Ä–∞—Ñ–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
fig_reconstruction = plot_reconstruction_comparison(f, f_approx_fft, f_approx_dct, err_fft, err_dct)
st.plotly_chart(fig_reconstruction, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫–∏ —Å–ø–µ–∫—Ç—Ä–æ–≤
st.header("üìà –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
fig_spectrum = plot_spectrum_comparison(f_fft, energies, idx_top, f_dct, num_coeffs_fft, num_coeffs_dct)
st.plotly_chart(fig_spectrum, use_container_width=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
fig_coeffs = plot_coefficients_comparison(f_fft, energies, idx_top, f_dct, num_coeffs_fft, num_coeffs_dct)
st.plotly_chart(fig_coeffs, use_container_width=True)

# –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
stats_data = {
    '–ú–µ—Ç–æ–¥': ['–§—É—Ä—å–µ', 'DCT'],
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤': [num_coeffs_fft, num_coeffs_dct],
    '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞': [err_fft, err_dct],
    '–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞': [
        np.mean(np.abs(f - f_approx_fft)),
        np.mean(np.abs(f - f_approx_dct))
    ],
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞': [
        np.max(np.abs(f - f_approx_fft)),
        np.max(np.abs(f - f_approx_dct))
    ]
}

df_stats = pd.DataFrame(stats_data)
st.dataframe(df_stats, use_container_width=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–∞—Ö")
col1, col2 = st.columns(2)

with col1:
    st.subheader("–§—É—Ä—å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    st.markdown("""
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    - –í—ã–±–∏—Ä–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π
    - –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: **–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø–∞—Ä—ã**
    """)

with col2:
    st.subheader("DCT –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    st.markdown("""
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    - –ë–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: **–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞**
    """)

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
st.header("üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö"):
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–¢–æ–ø –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –§—É—Ä—å–µ")
        top_coeffs_df = pd.DataFrame({
            '–ò–Ω–¥–µ–∫—Å': idx_top,
            '–ß–∞—Å—Ç–æ—Ç–∞': idx_top,
            '–ú–æ–¥—É–ª—å': energies[idx_top],
            '–§–∞–∑–∞ (—Ä–∞–¥)': np.angle(f_fft[idx_top])
        })
        st.dataframe(top_coeffs_df)
    
    with col2:
        st.subheader("–ü–µ—Ä–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã DCT")
        dct_coeffs_df = pd.DataFrame({
            '–ò–Ω–¥–µ–∫—Å': range(num_coeffs_dct),
            '–ó–Ω–∞—á–µ–Ω–∏–µ': f_dct[:num_coeffs_dct],
            '–ú–æ–¥—É–ª—å': np.abs(f_dct[:num_coeffs_dct])
        })
        st.dataframe(dct_coeffs_df)

st.markdown("---")
st.markdown("*–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞*")